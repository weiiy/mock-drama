import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:http/http.dart' as http;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: '.env');
  final supabaseUrl = dotenv.env['SUPABASE_URL'];
  final supabaseAnonKey = dotenv.env['SUPABASE_ANON_KEY'];
  if (supabaseUrl != null &&
      supabaseUrl.isNotEmpty &&
      supabaseAnonKey != null &&
      supabaseAnonKey.isNotEmpty) {
    await Supabase.initialize(url: supabaseUrl, anonKey: supabaseAnonKey);
  } else {
    debugPrint('Supabase Êú™ÂàùÂßãÂåñÔºåËØ∑Ê£ÄÊü• .env ÈÖçÁΩÆ„ÄÇ');
  }
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AI ‰∫íÂä®ÂâßÊú¨',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const StorySelectionPage(),
    );
  }
}

// ÂâßÊú¨Êï∞ÊçÆÊ®°Âûã
class Story {
  final String id;
  final String title;
  final String description;
  final String coverImage;
  final String systemPrompt;
  final List<String> tags;
  final String edgeFunctionName; // ÂØπÂ∫îÁöÑ Edge Function ÂêçÁß∞

  const Story({
    required this.id,
    required this.title,
    required this.description,
    required this.coverImage,
    required this.systemPrompt,
    required this.tags,
    required this.edgeFunctionName,
  });
}

// Á§∫‰æãÂâßÊú¨Êï∞ÊçÆ
final List<Story> availableStories = [
  Story(
    id: 'chongzhen',
    title: 'Â¥áÁ•ØÁöáÂ∏ù',
    description: 'Â¥áÁ•ØÂÖÉÂπ¥ÔºåÂ§©ÂêØÁöáÂ∏ùÊö¥ÊØôÔºå‰Ω†‰ªì‰øÉÂç≥‰Ωç„ÄÇÊúùÂ†Ç‰∏äÔºåÈòâÂÖö‰ΩôÊ≥¢‰ªçÊéåÈî¶Ë°£Âç´Ôºå‰∏úÊûóÂ£´‰∫∫‰∏éÂããÊàö‰∫íÁõ∏ÊîªËÆ¶ÔºõËæπÁñÜ‰∏äÔºåÂêéÈáëÈìÅÈ™ëËøûÈô∑ËæΩ‰∏úÔºåÂ±±Êµ∑ÂÖ≥È£éÈõ®È£òÊëáÔºõÊ∞ëÈó¥Âõ†ËøûÂπ¥Êó±Ê∂ù„ÄÅËùóÁÅæ‰∏éËµãÂΩπÂ§±Â∫èËÄåÁîüÊÄ®ÔºåË•øÂåó„ÄÅÊ±üÊ∑ÆÁõó‰π±ÂõõËµ∑„ÄÇ‰Ω†ËÉΩÂê¶ÂäõÊåΩÁãÇÊæúÔºåÊãØÊïëÂ§ßÊòéÁéãÊúùÔºü',
    coverImage: 'üèØ',
    systemPrompt: 'Â¥áÁ•ØÂÖÉÂπ¥ÔºåÂ§©ÂêØÁöáÂ∏ùÊö¥ÊØôÔºå‰Ω†‰ªì‰øÉÂç≥‰Ωç„ÄÇÊúùÂ†Ç‰∏äÔºåÈòâÂÖö‰ΩôÊ≥¢‰ªçÊéåÈî¶Ë°£Âç´Ôºå‰∏úÊûóÂ£´‰∫∫‰∏éÂããÊàö‰∫íÁõ∏ÊîªËÆ¶ÔºõËæπÁñÜ‰∏äÔºåÂêéÈáëÈìÅÈ™ëËøûÈô∑ËæΩ‰∏úÔºåÂ±±Êµ∑ÂÖ≥È£éÈõ®È£òÊëáÔºõÊ∞ëÈó¥Âõ†ËøûÂπ¥Êó±Ê∂ù„ÄÅËùóÁÅæ‰∏éËµãÂΩπÂ§±Â∫èËÄåÁîüÊÄ®ÔºåË•øÂåó„ÄÅÊ±üÊ∑ÆÁõó‰π±ÂõõËµ∑„ÄÇËØ∑ÂÖà‰ª•ÁöáÂ∏ùËßÜËßíÊ¶ÇËø∞Â§ßÊòéÂΩì‰∏ãÁöÑÂç±Â±ÄÔºåÁÑ∂ÂêéÊèêÂá∫‰Ω†Á≠πÂàíÁöÑÈ¶ñË¶ÅÂØπÁ≠ñ‰∏éÊñΩÊîøÈáçÁÇπ„ÄÇ',
    tags: ['ÂéÜÂè≤', 'Á≠ñÁï•', 'ÊòéÊúù'],
    edgeFunctionName: 'chongzhen',
  ),
  Story(
    id: 'fantasy_adventure',
    title: 'È≠îÊ≥ïÂ≠¶Èô¢',
    description: '‰Ω†ÊòØ‰∏ÄÂêçÂàöÂÖ•Â≠¶ÁöÑÈ≠îÊ≥ïÂ≠¶ÂæíÔºåÂú®Á•ûÁßòÁöÑÈòøÂç°Á∫≥È≠îÊ≥ïÂ≠¶Èô¢ÂºÄÂßã‰∫Ü‰Ω†ÁöÑÂÜíÈô©„ÄÇÂ≠¶Èô¢‰∏≠ÈöêËóèÁùÄÂè§ËÄÅÁöÑÁßòÂØÜÔºåÈªëÊöóÂäøÂäõË†¢Ë†¢Ê¨≤Âä®„ÄÇ‰Ω†Â∞ÜÂ≠¶‰π†È≠îÊ≥ï„ÄÅÁªì‰∫§‰ºô‰º¥ÔºåÊè≠ÂºÄÂ≠¶Èô¢ËÉåÂêéÁöÑÁúüÁõ∏„ÄÇ',
    coverImage: 'üîÆ',
    systemPrompt: '‰Ω†ÊòØÈòøÂç°Á∫≥È≠îÊ≥ïÂ≠¶Èô¢ÁöÑ‰∏ÄÂπ¥Á∫ßÊñ∞Áîü„ÄÇ‰ªäÂ§©ÊòØÂºÄÂ≠¶Á¨¨‰∏ÄÂ§©Ôºå‰Ω†Á´ôÂú®ÂÆè‰ºüÁöÑÂ≠¶Èô¢Â§ßÈó®ÂâçÔºåÊâã‰∏≠Êè°ÁùÄÂΩïÂèñÈÄöÁü•‰π¶„ÄÇÂ≠¶Èô¢ÁöÑÈ´òÂ°îÁõ¥Êèí‰∫ëÈúÑÔºåÁ©∫Ê∞î‰∏≠Âº•Êº´ÁùÄÈ≠îÊ≥ïÁöÑÊ∞îÊÅØ„ÄÇËØ∑ÊèèËø∞‰Ω†ÁöÑËßíËâ≤ËÉåÊôØÔºå‰ª•Âèä‰Ω†ÂØπÈ≠îÊ≥ïÂ≠¶Èô¢ÁöÑÁ¨¨‰∏ÄÂç∞Ë±°ÂíåÊúüÂæÖ„ÄÇ',
    tags: ['Â•áÂπª', 'ÂÜíÈô©', 'È≠îÊ≥ï'],
    edgeFunctionName: 'fantasy',
  ),
  Story(
    id: 'cyberpunk',
    title: 'ËµõÂçöÊúãÂÖã 2177',
    description: '2177Âπ¥Ôºå‰∫∫Á±ª‰∏éAIÂÖ±Â≠òÁöÑÊó∂‰ª£„ÄÇ‰Ω†ÊòØ‰∏ÄÂêçËµõÂçö‰æ¶Êé¢ÔºåÂú®ÈúìËôπÈó™ÁÉÅÁöÑÂ∑®ÂûãÈÉΩÂ∏Ç‰∏≠ËøΩÊü•ÁúüÁõ∏„ÄÇ‰ºÅ‰∏öÂ∑®Â§¥ÊìçÊéß‰∏ÄÂàáÔºåÂú∞‰∏ãÈªëÂÆ¢ÂèçÊäóÂéãËø´„ÄÇÂú®Ëøô‰∏™ÂÖâÊÄ™ÈôÜÁ¶ªÁöÑ‰∏ñÁïåÔºå‰Ω†Â∞ÜÂ¶Ç‰ΩïÈÄâÊã©Ëá™Â∑±ÁöÑÈÅìË∑ØÔºü',
    coverImage: 'ü§ñ',
    systemPrompt: '2177Âπ¥ÔºåÊñ∞‰∏ú‰∫¨„ÄÇ‰Ω†ÊòØ‰∏ÄÂêçÁã¨Á´ãËµõÂçö‰æ¶Êé¢ÔºåÂàöÂàöÊé•Âà∞‰∏Ä‰∏™Á•ûÁßòÂßîÊâò„ÄÇÂßîÊâò‰∫∫Â£∞Áß∞ÂèëÁé∞‰∫ÜÊüêÂ§ßÂûã‰ºÅ‰∏öÁöÑÈªëÂπïÔºå‰ΩÜÂú®Á∫¶ÂÆöËßÅÈù¢ÂâçÂ§±Ë∏™‰∫Ü„ÄÇ‰Ω†ÁöÑ‰πâ‰ΩìÊîπÈÄ†ËÆ©‰Ω†Êã•ÊúâË∂ÖË∂äÂ∏∏‰∫∫ÁöÑËÉΩÂäõÔºå‰ΩÜ‰πüËÆ©‰Ω†ËÉåË¥üÊ≤âÈáçÁöÑÂÄ∫Âä°„ÄÇËØ∑ÊèèËø∞‰Ω†ÁöÑËßíËâ≤ËÆæÂÆöÂíåÂΩìÂâçÂ§ÑÂ¢É„ÄÇ',
    tags: ['ÁßëÂπª', 'ÊÇ¨Áñë', 'ËµõÂçöÊúãÂÖã'],
    edgeFunctionName: 'cyberpunk',
  ),
];

// ÂâßÊú¨ÈÄâÊã©È°µÈù¢
class StorySelectionPage extends StatelessWidget {
  const StorySelectionPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ÈÄâÊã©‰Ω†ÁöÑÂÜíÈô©'),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Êé¢Á¥¢Êó†ÈôêÂèØËÉΩÁöÑÊïÖ‰∫ã',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'ÊØè‰∏™ÈÄâÊã©ÈÉΩ‰ºöÂΩ±ÂìçÊïÖ‰∫ãÁöÑËµ∞Âêë',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 24),
            Expanded(
              child: ListView.builder(
                itemCount: availableStories.length,
                itemBuilder: (context, index) {
                  final story = availableStories[index];
                  return Card(
                    margin: const EdgeInsets.only(bottom: 16),
                    clipBehavior: Clip.antiAlias,
                    child: InkWell(
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => StoryDetailPage(story: story),
                          ),
                        );
                      },
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Â∞ÅÈù¢ÂõæÊ†á
                            Container(
                              width: 80,
                              height: 80,
                              decoration: BoxDecoration(
                                color: Theme.of(context).colorScheme.primaryContainer,
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Center(
                                child: Text(
                                  story.coverImage,
                                  style: const TextStyle(fontSize: 40),
                                ),
                              ),
                            ),
                            const SizedBox(width: 16),
                            // ÂâßÊú¨‰ø°ÊÅØ
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    story.title,
                                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  const SizedBox(height: 8),
                                  Text(
                                    story.description,
                                    style: Theme.of(context).textTheme.bodyMedium,
                                    maxLines: 3,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  const SizedBox(height: 8),
                                  Wrap(
                                    spacing: 8,
                                    children: story.tags.map((tag) {
                                      return Chip(
                                        label: Text(tag),
                                        labelStyle: const TextStyle(fontSize: 12),
                                        padding: const EdgeInsets.symmetric(horizontal: 4),
                                        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                                      );
                                    }).toList(),
                                  ),
                                ],
                              ),
                            ),
                            const Icon(Icons.chevron_right),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// ÂâßÊú¨ËØ¶ÊÉÖÈ°µÈù¢
class StoryDetailPage extends StatelessWidget {
  final Story story;

  const StoryDetailPage({super.key, required this.story});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(story.title),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Â∞ÅÈù¢Âå∫Âüü
            Container(
              height: 200,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    Theme.of(context).colorScheme.primaryContainer,
                    Theme.of(context).colorScheme.secondaryContainer,
                  ],
                ),
              ),
              child: Center(
                child: Text(
                  story.coverImage,
                  style: const TextStyle(fontSize: 100),
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(24.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Ê†áÈ¢ò
                  Text(
                    story.title,
                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16),
                  // Ê†áÁ≠æ
                  Wrap(
                    spacing: 8,
                    children: story.tags.map((tag) {
                      return Chip(
                        label: Text(tag),
                        backgroundColor: Theme.of(context).colorScheme.secondaryContainer,
                      );
                    }).toList(),
                  ),
                  const SizedBox(height: 24),
                  // ÂâßÊú¨ÁÆÄ‰ªã
                  Text(
                    'ÂâßÊú¨ÁÆÄ‰ªã',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    story.description,
                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                      height: 1.6,
                    ),
                  ),
                  const SizedBox(height: 32),
                  // ÂºÄÂßãÊ∏∏ÊàèÊåâÈíÆ
                  FilledButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => DialoguePage(
                            story: story,
                          ),
                        ),
                      );
                    },
                    style: FilledButton.styleFrom(
                      minimumSize: const Size.fromHeight(56),
                      textStyle: const TextStyle(fontSize: 18),
                    ),
                    child: const Text('ÂºÄÂßãÂÜíÈô©'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

enum MessageRole { system, user, assistant }

class ChatMessage {
  const ChatMessage({required this.role, required this.content});

  final MessageRole role;
  final String content;

  Map<String, String> toJson() => {'role': role.name, 'content': content};
}

class DialoguePage extends StatefulWidget {
  const DialoguePage({super.key, required this.story});

  final Story story;

  @override
  State<DialoguePage> createState() => _DialoguePageState();
}

class _DialoguePageState extends State<DialoguePage> {
  late final List<ChatMessage> _messages;
  final TextEditingController _controller = TextEditingController();
  bool _isSending = false;
  String? _sessionId;
  String? _userId;

  SupabaseClient? get _supabaseClient {
    try {
      return Supabase.instance.client;
    } catch (_) {
      return null;
    }
  }

  @override
  void initState() {
    super.initState();
    _messages = [
      ChatMessage(
        role: MessageRole.system,
        content: widget.story.systemPrompt,
      ),
    ];
    _initializeSession();
  }

  String _extractSection(String source, String start, String? end) {
    final startIndex = source.indexOf(start);
    if (startIndex == -1) {
      return '';
    }
    final from = startIndex + start.length;
    final endIndex = end == null ? -1 : source.indexOf(end, from);
    if (endIndex == -1) {
      return source.substring(from);
    }
    return source.substring(from, endIndex);
  }

  List<MapEntry<String, String>> _parseAssistantSections(String content) {
    const headers = [
      'ÂõûÂ§çÔºö',
      'üìñÂâßÊÉÖÔºö',
      'üìäÊàêÊûúÔºö',
      'üí° ÊèêÁ§∫Ôºö',
    ];
    final sections = <MapEntry<String, String>>[];
    for (var i = 0; i < headers.length; i++) {
      final start = headers[i];
      final end = i + 1 < headers.length ? headers[i + 1] : null;
      final text = _extractSection(content, start, end).trim();
      if (text.isNotEmpty) {
        sections.add(MapEntry(start, text));
      }
    }
    return sections;
  }

  Widget _buildAssistantContent(BuildContext context, String content) {
    final sections = _parseAssistantSections(content);
    if (sections.isEmpty) {
      return Text(content);
    }
    final theme = Theme.of(context);
    final children = <Widget>[];
    for (var i = 0; i < sections.length; i++) {
      final entry = sections[i];
      children.add(
        Text(
          entry.key,
          style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
        ),
      );
      final paragraphs = entry.value.split(RegExp(r'\n\s*\n'));
      for (var j = 0; j < paragraphs.length; j++) {
        children.add(Padding(
          padding: EdgeInsets.only(top: j == 0 ? 6 : 10),
          child: Text(paragraphs[j]),
        ));
      }
      if (i != sections.length - 1) {
        children.add(const SizedBox(height: 14));
      }
    }
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.min,
      children: children,
    );
  }

  Widget _buildMessageContent(BuildContext context, ChatMessage message) {
    if (message.role == MessageRole.assistant) {
      return _buildAssistantContent(context, message.content);
    }
    return Text(message.content);
  }

  Future<void> _initializeSession() async {
    try {
      // ÁîüÊàê‰∏¥Êó∂Áî®Êà∑ ID
      _userId = 'user_${DateTime.now().millisecondsSinceEpoch}';
      
      // Ë∞ÉÁî® Python ÂêéÁ´ØÂàõÂª∫‰ºöËØù
      final agentServerUrl = dotenv.env['AGENT_SERVER_URL'] ?? 'http://localhost:8000';
      final response = await http.post(
        Uri.parse('$agentServerUrl/api/session/create'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'user_id': _userId,
          'story_id': widget.story.id, // ‰ΩøÁî®ÂâßÊú¨ ID
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          _sessionId = data['session_id'] as String?;
        });
        debugPrint('‰ºöËØùÂ∑≤ÂàõÂª∫: $_sessionId');
      } else {
        debugPrint('ÂàõÂª∫‰ºöËØùÂ§±Ë¥•: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      debugPrint('ÂàùÂßãÂåñ‰ºöËØùÂ§±Ë¥•: $e');
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  Future<void> _sendMessage() async {
    final text = _controller.text.trim();
    if (text.isEmpty || _isSending) {
      return;
    }
    
    setState(() {
      _isSending = true;
      _messages.add(ChatMessage(role: MessageRole.user, content: text));
      _controller.clear();
      // Ê∑ªÂä†‰∏Ä‰∏™Âç†‰ΩçÊ∂àÊÅØÁî®‰∫éÊµÅÂºèÊòæÁ§∫
      _messages.add(const ChatMessage(role: MessageRole.assistant, content: ''));
    });
    
    await _invokeEdgeFunctionStream();
    
    if (!mounted) return;
    
    setState(() {
      _isSending = false;
    });
  }

  Future<void> _invokeEdgeFunctionStream() async {
    if (_sessionId == null) {
      _updateStreamingMessage('‰ºöËØùÊú™ÂàùÂßãÂåñ');
      return;
    }

    try {
      final agentServerUrl = dotenv.env['AGENT_SERVER_URL'] ?? 'http://localhost:8000';
      
      // Ëé∑ÂèñÁî®Êà∑ÊúÄÂêé‰∏ÄÊù°Ê∂àÊÅØ
      final userMessage = _messages.where((m) => m.role == MessageRole.user).last.content;
      
      // Ë∞ÉÁî® Python ÂêéÁ´ØÂ§ÑÁêÜÁî®Êà∑Ë°åÂä®
      final url = Uri.parse('$agentServerUrl/api/story/action');
      final request = http.Request('POST', url);
      request.headers.addAll({
        'Content-Type': 'application/json',
      });
      
      request.body = jsonEncode({
        'session_id': _sessionId,
        'user_input': userMessage,
      });

      final streamedResponse = await request.send();
      
      if (streamedResponse.statusCode != 200) {
        final errorBody = await streamedResponse.stream.bytesToString();
        _updateStreamingMessage('Agent Server Ë∞ÉÁî®Â§±Ë¥•: ${streamedResponse.statusCode} $errorBody');
        return;
      }

      // ËØªÂèñÂÆåÊï¥ÂìçÂ∫î
      final responseBody = await streamedResponse.stream.bytesToString();
      final responseData = jsonDecode(responseBody) as Map<String, dynamic>;
      
      // Ëé∑ÂèñÂâßÊÉÖÂÜÖÂÆπ
      final story = responseData['story'] as String?;
      if (story != null) {
        _updateStreamingMessage(story, isFinal: true);
        
        // Ê£ÄÊü•Á´†ËäÇÁä∂ÊÄÅ
        final chapterStatus = responseData['chapter_status'] as String?;
        if (chapterStatus == 'ending') {
          // Ê∏∏ÊàèÁªìÊùü
          final ending = responseData['ending'] as Map<String, dynamic>?;
          if (ending != null) {
            debugPrint('Ê∏∏ÊàèÁªìÊùüÔºåÁªìÂ±ÄÁ±ªÂûã: ${ending['ending_type']}');
          }
        } else if (chapterStatus == 'next_chapter') {
          debugPrint('ËøõÂÖ•‰∏ã‰∏ÄÁ´†ËäÇ');
        }
      } else {
        _updateStreamingMessage('Êú™Êî∂Âà∞ÂâßÊÉÖÂìçÂ∫î', isFinal: true);
      }
    } catch (error) {
      _updateStreamingMessage('Agent Server Ë∞ÉÁî®Â§±Ë¥•Ôºö$error');
    }
  }

  void _updateStreamingMessage(String content, {bool isFinal = false}) {
    if (!mounted) return;
    setState(() {
      // Êõ¥Êñ∞ÊúÄÂêé‰∏ÄÊù°Ê∂àÊÅØ
      if (_messages.isNotEmpty && _messages.last.role == MessageRole.assistant) {
        _messages[_messages.length - 1] = ChatMessage(
          role: MessageRole.assistant,
          content: content,
        );
      }
      if (isFinal) {
        _isSending = false;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.story.title),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                final message = _messages[index];
                final isUser = message.role == MessageRole.user;
                final alignment = isUser
                    ? Alignment.centerRight
                    : Alignment.centerLeft;
                final color = switch (message.role) {
                  MessageRole.system => Colors.grey.shade300,
                  MessageRole.user => Theme.of(
                    context,
                  ).colorScheme.primaryContainer,
                  MessageRole.assistant => Theme.of(
                    context,
                  ).colorScheme.secondaryContainer,
                };
                return Align(
                  alignment: alignment,
                  child: Container(
                    margin: const EdgeInsets.symmetric(vertical: 6),
                    padding: const EdgeInsets.symmetric(
                      vertical: 10,
                      horizontal: 14,
                    ),
                    decoration: BoxDecoration(
                      color: color,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: _buildMessageContent(context, message),
                  ),
                );
              },
            ),
          ),
          const Divider(height: 1),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _controller,
                    enabled: !_isSending,
                    minLines: 1,
                    maxLines: 4,
                    decoration: const InputDecoration(
                      hintText: 'ËæìÂÖ•‰Ω†ÁöÑÈÄâÊã©ÂíåË°åÂä®...',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                FilledButton(
                  onPressed: _isSending ? null : _sendMessage,
                  child: _isSending
                      ? const SizedBox(
                          width: 16,
                          height: 16,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : const Text('ÂèëÈÄÅ'),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
